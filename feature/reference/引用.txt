引用，在 PHP 中引用意味着用不同的名字访问同一个变量内容。
这并不像 C 的指针：例如你不能对他们做指针运算，他们并不是实际的内存地址…… 查看引用不是什么了解更多信息。 
替代的是，引用是符号表别名。注意在PHP 中，变量名和变量内容是不一样的， 因此同样的内容可以有不同的名字。
最接近的比喻是 Unix 的文件名和文件本身——变量名是目录条目，而变量内容则是文件本身。引用可以被看作是 Unix 文件系统中的硬链接。


基本用法：
$a=$b    $a是$b的副本，将值复制了一遍，两个变量指向不同的值
$a=&$b    $a是$b的引用，两个变量指向相同的值
($a=123    也是创建了一个引用，可以这么理解)

引用传递：
function foo(&$var){
    $var++;
}
$a=5;
foo($a);
//$a===6;


引用返回：
将函数的返回值所引用的值的引用赋给了接收引用的变量，实际上是执行了两次引用操作，所以需要有两个引用符号
下面的例子中$myValue=&(函数的返回值，匿名)=&($this->value)
如果函数的返回值用$return表示的话，实际上就是$return=&$this->value;$myValue=&$return;
<?php
class foo {
    public $value = 42;

    public function &getValue() {//在定义函数时添加引用符号，表示返回的是引用而不是新的备份。相当于一次隐式的赋值操作，将引用赋给匿名的变量（函数的返回值）
        return $this->value;
    }
}

$obj = new foo;
$myValue = &$obj->getValue(); //此处相当于另一次赋值操作，可以理解成先运行函数，然后用变量的返回值（的引用）对$myValue进行赋值
//$myValue is a reference to $obj->value, which is 42.
$obj->value = 2;
echo $myValue;
// prints the new value of $obj->value, i.e. 2.
?>


取消引用：
当 unset 一个引用，只是断开了变量名和变量内容之间的绑定。这并不意味着变量内容被销毁了(根据引用计数的理论，只有所有引用都被删除，被引用的值才会删除)
unset($a);
在js中delete 也是同样的作用

global 引用:
当用 global $var 声明一个变量时实际上建立了一个到全局变量的引用。也就是说和这样做是相同的：
global $var等效于$var =& $GLOBALS["var"];
这意味着，例如，unset $var 不会 unset 全局变量。


$this：
在一个对象的方法中，$this 永远是调用它的对象的引用。


注意事项：
php中的变量赋值实际上是将值复制了一份；php中的引用才是传递的引用
js中的变量赋值，对于基本类型，是将值复制给新的变量；对于对象（包括函数、数组等），是传递的引用
PHP中的unset是删除引用，JS中的delete，如果是引用的对象的话，也是删除引用