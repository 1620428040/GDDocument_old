相关链接：	http://www.cnblogs.com/saw2012/archive/2013/01/30/2882451.html	PHP的输出缓冲区（转）

之前一直将php的输出机制理解为，php的所有输出会在php脚本运行结束后一起返回给浏览器，事实上，这是不对的！
php服务器存在双层的缓存机制，一层是php自身的缓存，另一层是Apache的缓存。
需要注意的是:
一、每次输出的内容长度过短会导致一些异常，可以使用空格填充内容<?php echo str_repeat(" ",4096);?>
1.有些浏览器只有接受的内容超过一定长度才会显示，例如，老版的IE(必须要大于256k才显示)
2.有些webserver,他自身的输出缓冲区会有一些限制,比如nginx,他有一个配置fastcgi_buffer_size 4k, 就是是表明,当自身的输出缓冲区的内容达到4K才会刷新
二、一定要先输出php的缓存(ob_flush)，再输出Apache的缓存(flush)，否则输出的内容为空
三、Apache的压缩模块mod_gzip也有自己的缓存，所以使用时应该关闭压缩模块


php的输出机制
php与用户的浏览器使用http协议通信，使用的是报文的形式，每次报文都有请求头和响应头
header函数不受缓冲区的影响，会直接把响应头返回给浏览器。如果之前已经把其他内容输出了，就会报错，但是之前的内容还存在缓冲区中就没有问题
报文的内容可以分成多个部分传输


与输出缓冲区有关的配置
在PHP.INI中,有两个跟缓冲区紧密相关的配置项
1.output_buffering
该配置直接影响的是php本身的缓冲区,有3种配置参数.on/off/xK(x为某个整型数值);
on    - 开启缓冲区
off    - 关闭缓冲区
256k    - 开启缓冲区,而且当缓冲区的内容超过256k的时候,自动刷新缓冲区(把数据发送到apache);

2.implicit_flush
该配置直接影响apache的缓冲区,有2种配置参数. on/off
on    - 自动刷新apache缓冲区,也就是,当php发送数据到apache的缓冲区的时候,不需要等待其他指令,直接就把输出返回到浏览器
off    - 不自动刷新apache缓冲区,接受到数据后,等待刷新指令


相关函数：
ob_implicit_flush	作用和implicit_flush一样,是否自动刷新apache的缓冲区
ob_start			打开输出缓冲区,无论php.ini的文件如何配置,如果使用该函数,即使output_buffering设置成off,也会打开输出缓冲区
					ob_start函数还接受一个参数,该参数是一个函数的回调,意思是,在输入缓冲区内容之前,需要使用调用传递进来的参数把缓冲区的内容处理一次,再放入缓冲区内
ob_flush			指示php本身刷新自身的缓冲区,把数据发送到apache
flush				作用是发送指令到apache,让apache刷新自身的输出缓冲区.
ob_clean			清除php缓冲区里面的内容
ob_end_clean		清除php缓冲区内的内容,并且关闭输出缓冲区
ob_end_flush		把php自身的缓冲区里的内容发送到apache,并把清除自身缓冲区内的内容
ob_get_clean		获取缓冲区的内容之后,清除缓冲区.
ob_get_contents		获取输出缓冲区里的内容
ob_get_flush		获取缓冲区里的内容,并且把这些内容发送到apache
ob_get_length		获取缓冲区里内容的长度
ob_list_handlers	获取运行ob_start时,所回调的函数名称, 例如:
					ob_start(‘ob_gzhandler’);
					print_r(ob_list_handlers);
					将打印出ob_gzhandler;
ob_gzhandler		该函数的作用是作为ob_start的回调参数, 在缓冲区刷新之前,会调用该函数对数据进行到底gzip或者deflate压缩.这个函数需要zlib扩展的支持.

